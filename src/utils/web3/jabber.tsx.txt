import { PublicKey, Connection } from "@solana/web3.js";
import BN from "bn.js";
import { Schema, deserializeUnchecked, deserialize } from "borsh";
import {
  JABBER_ID,
  SendMessage,
  SetUserProfile,
  CreateThread,
  CreateProfile,
  Tag,
  CreateGroupThread,
  CreateGroupIndex,
  EditGroupThread,
} from "@bonfida/jabber";
import { orderKeys } from "@bonfida/jabber";
import { findProgramAddress } from "./program-address";

export const createThread = async (
  sender: PublicKey,
  receiver: PublicKey,
  feePayer: PublicKey
) => {
  const [thread] = await findProgramAddress(
    Thread.generateSeeds(sender, receiver),
    JABBER_ID
  );

  const instruction = new CreateThread({
    sender: sender.toBuffer(),
    receiver: receiver.toBuffer(),
  }).getInstruction(thread, feePayer);

  return instruction;
};

export const sendMessage = async (
  connection: Connection,
  sender: PublicKey,
  receiver: PublicKey,
  message: Uint8Array,
  kind: MessageType
) => {
  const [receiverProfile] = await findProgramAddress(
    Profile.generateSeeds(receiver),
    JABBER_ID
  );
  const [threadAccount] = await findProgramAddress(
    Thread.generateSeeds(sender, receiver),
    JABBER_ID
  );

  const thread = await Thread.retrieve(connection, sender, receiver);

  const [messageAccount] = await findProgramAddress(
    Message.generateSeeds(thread.msgCount, sender, receiver),
    JABBER_ID
  );

  const instruction = new SendMessage({
    kind: kind,
    message: message,
  }).getInstruction(
    sender,
    receiver,
    threadAccount,
    receiverProfile,
    messageAccount
  );

  return instruction;
};

export const createProfile = async (
  profileOwner: PublicKey,
  name: string,
  bio: string,
  lamportsPerMessage: number
) => {
  const [profile] = await findProgramAddress(
    Profile.generateSeeds(profileOwner),
    JABBER_ID
  );
  const instruction = new CreateProfile({
    name: name,
    bio: bio,
    lamportsPerMessage: new BN(lamportsPerMessage),
  }).getInstruction(profile, profileOwner, profileOwner);

  return instruction;
};

export const setUserProfile = async (
  profileOwner: PublicKey,
  name: string,
  bio: string,
  lamportsPerMessage: number
) => {
  const [profile] = await findProgramAddress(
    Profile.generateSeeds(profileOwner),
    JABBER_ID
  );

  const instruction = new SetUserProfile({
    name: name,
    bio: bio,
    lamportsPerMessage: new BN(lamportsPerMessage),
  }).getInstruction(profileOwner, profile);

  return instruction;
};

export enum MessageType {
  Encrypted = 0,
  Unencrypted = 1,
  EncryptedImage = 2,
  UnencryptedImage = 3,
}

export class Profile {
  tag: Tag;
  name: string;
  bio: string;
  lamportsPerMessage: BN;
  bump: number;

  static schema: Schema = new Map([
    [
      Profile,
      {
        kind: "struct",
        fields: [
          ["tag", "u8"],
          ["name", "string"],
          ["bio", "string"],
          ["lamportsPerMessage", "u64"],
          ["bump", "u8"],
        ],
      },
    ],
  ]);

  constructor(obj: {
    name: string;
    bio: string;
    lamportsPerMessage: BN;
    bump: number;
  }) {
    this.tag = Tag.Profile;
    this.name = obj.name;
    this.bio = obj.bio;
    this.lamportsPerMessage = obj.lamportsPerMessage;
    this.bump = obj.bump;
  }

  static deserialize(data: Buffer) {
    return deserializeUnchecked(this.schema, Profile, data) as Profile;
  }

  static async getKey(owner: PublicKey) {
    const [profile] = await findProgramAddress(
      Profile.generateSeeds(owner),
      JABBER_ID
    );
    return profile;
  }

  static async retrieve(connection: Connection, owner: PublicKey) {
    const [profile] = await findProgramAddress(
      Profile.generateSeeds(owner),
      JABBER_ID
    );

    const accountInfo = await connection.getAccountInfo(profile);

    if (!accountInfo?.data) {
      throw new Error("No profile found");
    }

    return this.deserialize(accountInfo?.data);
  }

  static generateSeeds(profileOwner: PublicKey) {
    return [Buffer.from("profile"), profileOwner.toBuffer()];
  }
}

export class Thread {
  tag: Tag;
  msgCount: number;
  user1: PublicKey;
  user2: PublicKey;
  bump: number;

  static schema: Schema = new Map([
    [
      Thread,
      {
        kind: "struct",
        fields: [
          ["tag", "u8"],
          ["msgCount", "u32"],
          ["user1", [32]],
          ["user2", [32]],
          ["bump", "u8"],
        ],
      },
    ],
  ]);

  constructor(obj: {
    msgCount: number;
    user1: Uint8Array;
    user2: Uint8Array;
    bump: number;
  }) {
    this.tag = Tag.Thread;
    this.msgCount = obj.msgCount;
    this.user1 = new PublicKey(obj.user1);
    this.user2 = new PublicKey(obj.user2);
    this.bump = obj.bump;
  }

  static deserialize(data: Buffer) {
    return deserialize(this.schema, Thread, data);
  }

  static generateSeeds(sender: PublicKey, receiver: PublicKey) {
    const [key1, key2] = orderKeys(sender, receiver);
    return [Buffer.from("thread"), key1.toBuffer(), key2.toBuffer()];
  }

  static async getKeys(
    sender: PublicKey | undefined,
    receiver: PublicKey | undefined
  ) {
    if (!sender || !receiver) return;
    const [thread] = await findProgramAddress(
      Thread.generateSeeds(sender, receiver),
      JABBER_ID
    );
    return thread;
  }

  static async retrieve(
    connection: Connection,
    sender: PublicKey,
    receiver: PublicKey
  ) {
    const [thread] = await findProgramAddress(
      Thread.generateSeeds(sender, receiver),
      JABBER_ID
    );
    const accountInfo = await connection.getAccountInfo(thread);

    if (!accountInfo?.data) {
      throw new Error("Thread not found");
    }

    return this.deserialize(accountInfo.data);
  }

  static async retrieveFromKey(connection: Connection, key: PublicKey) {
    const accountInfo = await connection.getAccountInfo(key);

    if (!accountInfo?.data) {
      throw new Error("Thread not found");
    }

    return this.deserialize(accountInfo.data);
  }
}

export class Message {
  tag: Tag;
  kind: MessageType;
  timestamp: BN;
  msg: Uint8Array;
  sender: PublicKey;

  static schema: Schema = new Map([
    [
      Message,
      {
        kind: "struct",
        fields: [
          ["tag", "u8"],
          ["kind", "u8"],
          ["timestamp", "u64"],
          ["msg", ["u8"]],
          ["sender", [32]],
        ],
      },
    ],
  ]);

  constructor(obj: {
    kind: MessageType;
    timestamp: BN;
    msg: Uint8Array;
    sender: Uint8Array;
  }) {
    this.tag = Tag.Message;
    this.kind = obj.kind;
    this.timestamp = obj.timestamp;
    this.msg = obj.msg;
    this.sender = new PublicKey(obj.sender);
  }

  static deserialize(data: Buffer) {
    return deserializeUnchecked(this.schema, Message, data);
  }

  static generateSeeds(
    messageCount: number,
    sender: PublicKey,
    receiver: PublicKey
  ) {
    const [key1, key2] = orderKeys(sender, receiver);
    return [
      Buffer.from("message"),
      Buffer.from(messageCount.toString()),
      key1.toBuffer(),
      key2.toBuffer(),
    ];
  }

  static async getKey(index: number, receiver: PublicKey, sender: PublicKey) {
    const [messageAccount] = await findProgramAddress(
      this.generateSeeds(index, sender, receiver),
      JABBER_ID
    );
    return messageAccount;
  }

  static async retrieveFromIndex(
    connection: Connection,
    index: number,
    receiver: PublicKey,
    sender: PublicKey
  ) {
    const [messageAccount] = await findProgramAddress(
      this.generateSeeds(index, sender, receiver),
      JABBER_ID
    );
    const accountInfo = await connection.getAccountInfo(messageAccount);
    if (!accountInfo?.data) {
      throw new Error("Invalid message info");
    }
    return this.deserialize(accountInfo.data);
  }

  static async retrieveFromThread(
    connection: Connection,
    sender: PublicKey,
    receiver: PublicKey,
    limit?: number
  ) {
    const thread = await Thread.retrieve(connection, sender, receiver);
    const messageAccounts: PublicKey[] = [];
    const start = limit ? limit : thread.msgCount;
    for (let i = thread.msgCount - start; i < thread.msgCount; i++) {
      const [acc] = await findProgramAddress(
        this.generateSeeds(i, sender, receiver),
        JABBER_ID
      );
      messageAccounts.push(acc);
    }
    const accountInfos = await connection.getMultipleAccountsInfo(
      messageAccounts
    );
    return accountInfos.map((info, i) =>
      info?.data
        ? deserializeMessage(
            info?.data,
            messageAccounts[i],
            thread.msgCount - start + i,
            receiver,
            sender
          )
        : undefined
    );
  }

  static async retrieveFromIndexes(
    connection: Connection,
    indexes: number[],
    receiver: PublicKey,
    sender: PublicKey
  ) {
    const messageAccounts: PublicKey[] = [];
    for (const i of indexes) {
      const [acc] = await findProgramAddress(
        this.generateSeeds(i, sender, receiver),
        JABBER_ID
      );
      messageAccounts.push(acc);
    }
    const accountInfos = await connection.getMultipleAccountsInfo(
      messageAccounts
    );
    return accountInfos.map((info, i) =>
      info?.data
        ? deserializeMessage(
            info?.data,
            messageAccounts[i],
            indexes[i],
            receiver,
            sender
          )
        : undefined
    );
  }
}

const deserializeMessage = (
  data: Buffer,
  address: PublicKey,
  index: number,
  receiver: PublicKey,
  sender: PublicKey
) => {
  const result = {
    message: Message.deserialize(data),
    address: address,
    index: index,
    receiver: receiver,
    sender: sender,
  };
  return result;
};

export class GroupThread {
  tag: Tag;
  groupName: string;
  msgCount: number;
  destinationWallet: PublicKey;
  lamportsPerMessage: BN;
  bump: number;
  admins: PublicKey[];
  owner: PublicKey;
  mediaEnabled: boolean;
  adminOnly: boolean;
  groupPicHash: string;

  static schema: Schema = new Map([
    [
      GroupThread,
      {
        kind: "struct",
        fields: [
          ["tag", "u8"],
          ["owner", [32]],
          ["destinationWallet", [32]],
          ["msgCount", "u32"],
          ["lamportsPerMessage", "u64"],
          ["bump", "u8"],
          ["mediaEnabled", "u8"],
          ["adminOnly", "u8"],
          ["groupPicHash", { kind: "option", type: "string" }],
          ["groupName", "string"],
          ["admins", [[32]]],
        ],
      },
    ],
  ]);

  constructor(obj: {
    groupName: string;
    msgCount: number;
    destinationWallet: Uint8Array;
    lamportsPerMessage: BN;
    bump: number;
    admins: Uint8Array[];
    owner: Uint8Array;
    mediaEnabled: number;
    adminOnly: number;
    groupPicHash: string;
  }) {
    this.tag = Tag.GroupThread;
    this.groupName = obj.groupName;
    this.msgCount = obj.msgCount;
    this.destinationWallet = new PublicKey(obj.destinationWallet);
    this.lamportsPerMessage = obj.lamportsPerMessage;
    this.bump = obj.bump;
    this.admins = obj.admins.map((e) => new PublicKey(e));
    this.owner = new PublicKey(obj.owner);
    this.mediaEnabled = !!obj.mediaEnabled;
    this.adminOnly = !!obj.adminOnly;
    this.groupPicHash = obj.groupPicHash;
  }

  static deserialize(data: Buffer) {
    return deserializeUnchecked(this.schema, GroupThread, data);
  }

  static generateSeeds(groupName: string, owner: PublicKey) {
    return [
      Buffer.from("group_thread"),
      Buffer.from(groupName),
      owner.toBuffer(),
    ];
  }

  static async getKey(groupName: string, owner: PublicKey) {
    const [groupThread] = await findProgramAddress(
      GroupThread.generateSeeds(groupName, owner),
      JABBER_ID
    );
    return groupThread;
  }

  static async retrieve(
    connection: Connection,
    groupName: string,
    owner: PublicKey
  ) {
    const groupThreadKey = await GroupThread.getKey(groupName, owner);

    const accountInfo = await connection.getAccountInfo(groupThreadKey);

    if (!accountInfo?.data) {
      throw new Error("Group thread not found");
    }

    return this.deserialize(accountInfo.data) as GroupThread;
  }

  static async retrieveFromKey(connection: Connection, key: PublicKey) {
    const accountInfo = await connection.getAccountInfo(key);

    if (!accountInfo?.data) {
      throw new Error("Group thread not found");
    }

    return this.deserialize(accountInfo.data) as GroupThread;
  }
}

export const createGroupThread = async (
  groupName: string,
  destinationWallet: PublicKey,
  lamportsPerMessage: BN,
  admins: PublicKey[],
  owner: PublicKey,
  mediaEnabled: boolean,
  feePayer: PublicKey,
  adminOnly
) => {
  const groupThread = await GroupThread.getKey(groupName, owner);

  const instruction = new CreateGroupThread({
    groupName,
    destinationWallet: destinationWallet.toBuffer(),
    lamportsPerMessage,
    admins: admins.map((e) => e.toBuffer()),
    owner: owner.toBuffer(),
    mediaEnabled,
    adminOnly,
  }).getInstruction(groupThread, feePayer);

  return instruction;
};

export class GroupThreadIndex {
  tag: number;
  groupName: string;
  groupThreadKey: Uint8Array;
  owner: Uint8Array;

  static schema: Schema = new Map([
    [
      GroupThreadIndex,
      {
        kind: "struct",
        fields: [
          ["tag", "u8"],
          ["groupThreadKey", [32]],
          ["owner", [32]],
          ["groupName", "string"],
        ],
      },
    ],
  ]);

  constructor(obj: {
    groupName: string;
    groupThreadKey: Uint8Array;
    owner: Uint8Array;
  }) {
    this.tag = Tag.GroupThreadIndex;
    this.groupName = obj.groupName;
    this.groupThreadKey = obj.groupThreadKey;
    this.owner = obj.owner;
  }

  static deserialize(data: Buffer) {
    return deserializeUnchecked(this.schema, GroupThreadIndex, data);
  }

  static generateSeeds(
    groupName: string,
    owner: PublicKey,
    groupThreadKey: PublicKey
  ) {
    return [
      Buffer.from("group_thread_index"),
      Buffer.from(groupName),
      owner.toBuffer(),
      groupThreadKey.toBuffer(),
    ];
  }

  static async getKey(
    groupName: string,
    owner: PublicKey,
    groupThreadKey: PublicKey
  ) {
    const [groupThreadIndex] = await findProgramAddress(
      GroupThreadIndex.generateSeeds(groupName, owner, groupThreadKey),
      JABBER_ID
    );
    return groupThreadIndex;
  }

  static async retrieve(
    connection: Connection,
    groupName: string,
    owner: PublicKey,
    groupThreadKey: PublicKey
  ) {
    const groupThreadIndexKey = await GroupThreadIndex.getKey(
      groupName,
      owner,
      groupThreadKey
    );

    const accountInfo = await connection.getAccountInfo(groupThreadIndexKey);

    if (!accountInfo?.data) {
      throw new Error("Group index not found");
    }

    return this.deserialize(accountInfo.data);
  }

  static async retrieveFromKey(connection: Connection, key: PublicKey) {
    const accountInfo = await connection.getAccountInfo(key);

    if (!accountInfo?.data) {
      throw new Error("Group index not found");
    }

    return this.deserialize(accountInfo.data);
  }
}

export const createGroupIndex = async (
  groupName: string,
  owner: PublicKey,
  groupThread: PublicKey
) => {
  const groupIndex = await GroupThreadIndex.getKey(
    groupName,
    owner,
    groupThread
  );
  const instruction = new CreateGroupIndex({
    groupName,
    groupThreadKey: groupThread.toBuffer(),
    owner: owner.toBuffer(),
  }).getInstruction(groupIndex, owner);

  return instruction;
};

export const editGroupThread = async (
  groupName: string,
  owner: PublicKey,
  destinationWallet: PublicKey,
  lamportsPerMessage: BN,
  mediaEnabled: boolean,
  adminOnly: boolean,
  groupPicHash?: string
) => {
  const groupThread = await GroupThread.getKey(groupName, owner);

  const instruction = new EditGroupThread({
    destinationWallet: destinationWallet.toBuffer(),
    lamportsPerMessage,
    owner: owner.toBuffer(),
    mediaEnabled: mediaEnabled,
    adminOnly,
    groupPicHash,
  }).getInstruction(owner, groupThread);

  return instruction;
};